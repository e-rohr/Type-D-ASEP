from sympy import *

fout = open(f'so10_ge_symb_guess_playground.txt', 'w')

######## Variables ########
n = 5
q = Symbol('q')
r = Symbol('r')

####### Matrices ########
# 1-indexed, returns K_index in the fundamental representation of so(2n)
def k(index):
    K = zeros(2*n)
    H = h(index)
    for i in range(2*n):
        K[i, i] = q**(H[i,i])
    return K

# 1-indexed, returns 1/K_index in the fundamental representation of so(2n)
def kNeg(index):
    K = zeros(2*n)
    H = h(index)
    for i in range(2*n):
        K[i, i] = q**(-H[i,i])
    return K

# 1-indexed, returns K_index in the fundamental representation of so(2n)
def h(index):
    H = zeros(2*n)
    if (index < n):
        H[index - 1, index - 1] = 1
        H[index, index] = -1
        H[n + index - 1, n + index - 1] = -1
        H[n + index, n + index] = 1
    else:
        H[n - 2, n - 2] = 1
        H[n - 1, n - 1] = 1
        H[2*n - 2, 2*n - 2] = -1
        H[2*n - 1, 2*n - 1] = -1
        
    return H

# 1-indexed, returns E_index in the fundamental representation of so(2n)
def e(index):
    E = zeros(2*n)
    if (index < n):
        E[index - 1, index] = 1
        E[n + index, n + index - 1] = -1
    else:
        E[n - 2, 2*n - 1] = 1
        E[n - 1, 2*n - 2] = -1
    return E

# 1-indexed, returns F_index in the fundamental representation of so(2n)
def f(index):
    F = zeros(2*n)
    if (index < n):
        F[index, index - 1] = 1
        F[n - 1 + index, n + index] = -1
    else:
        F[2*n - 2, n - 1] = 1
        F[2*n - 1, n - 2] = - 1
    return F

E1 = e(1)
E2 = e(2)
E3 = e(3)
E4 = e(4)
E5 = e(5)
F1 = f(1)
F2 = f(2)
F3 = f(3)
F4 = f(4)
F5 = f(5)
K1 = k(1)
K2 = k(2)
K3 = k(3)
K4 = k(4)
K5 = k(5)
KNeg1 = kNeg(1)
KNeg2 = kNeg(2)
KNeg3 = kNeg(3)
KNeg4 = kNeg(4)
KNeg5 = kNeg(5)



########### Left Sum ##########
left1 = q**(-8)*K4*KNeg5*KNeg1**2*KNeg2**2*KNeg3**2*KNeg4**2
left2 = q**(-6)*K4*KNeg5*KNeg2**2*KNeg3**2*KNeg4**2
left3 = q**(-4)*K4*KNeg5*KNeg3**2*KNeg4**2
left4 = q**(-2)*K4*KNeg5*KNeg4**2
left5 = K4*KNeg5
leftNeg1 = q**8*KNeg4*K5*K1**2*K2**2*K3**2*K4**2
leftNeg2 = q**6*KNeg4*K5*K2**2*K3**2*K4**2
leftNeg3 = q**4*KNeg4*K5*K3**2*K4**2
leftNeg4 = q**2*KNeg4*K5*K4**2
leftNeg5 = KNeg4*K5

########### Right Sum #########
# n, i, j, case
right5121 = ((q - 1/q)**2/q**7)*F1*K4*KNeg5*KNeg1**2*KNeg2**2*KNeg3**2*KNeg4**2*K1*E1
right5131 = ((q - 1/q)**4/q**7)*((-q/(q**2 - 1))*F2*F1 + (q**2/(q**2 - 1))*F1*F2)*K4*KNeg5*KNeg1**2*KNeg2**2*KNeg3**2*KNeg4**2*K1*K2*((-q/(q**2 - 1))*E1*E2 + (q**2/(q**2 - 1))*E2*E1)
right5141 = ((q - 1/q)**6/q**7)*((q**2/(q**4 - 2*q**2 + 1))*F3*F2*F1 + (-q**3/(q**4 - 2*q**2 + 1))*F1*F3*F2 + (-q**3/(q**4 - 2*q**2 + 1))*F2*F1*F3 + (q**4/(q**4 - 2*q**2 + 1))*F1*F2*F3)*K4*KNeg5*KNeg1**2*KNeg2**2*KNeg3**2*KNeg4**2*K1*K2*K3*((q**2/(q**4 - 2*q**2 + 1))*E1*E2*E3 + (-q**3/(q**4 - 2*q**2 + 1))*E2*E3*E1 + (-q**3/(q**4 - 2*q**2 + 1))*E3*E1*E2 + (q**4/(q**4 - 2*q**2 + 1))*E3*E2*E1)
right5151 = ((q - 1/q)**8/q**7)*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F3*F2*F1 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F4*F3*F2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F1*F4*F3 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F3*F2*F1*F4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F2*F4*F3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F3*F2*F4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F1*F3*F4 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F2*F3*F4)*K4*KNeg5*KNeg1**2*KNeg2**2*KNeg3**2*KNeg4**2*K1*K2*K3*K4*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E2*E3*E4 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E3*E4*E1 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E3*E4*E1*E2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E1*E2*E3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E3*E4*E2*E1 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E2*E3*E1 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E3*E1*E2 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E3*E2*E1)
right5231 = ((q - 1/q)**2/q**5)*F2*K4*KNeg5*KNeg2**2*KNeg3**2*KNeg4**2*K2*E2
right5241 = ((q - 1/q)**4/q**5)*((-q/(q**2 - 1))*F3*F2 + (q**2/(q**2 - 1))*F2*F3)*K4*KNeg5*KNeg2**2*KNeg3**2*KNeg4**2*K2*K3*((-q/(q**2 - 1))*E2*E3 + (q**2/(q**2 - 1))*E3*E2)
right5251 = ((q - 1/q)**6/q**5)*((q**2/(q**4 - 2*q**2 + 1))*F4*F3*F2 + (-q**3/(q**4 - 2*q**2 + 1))*F2*F4*F3 + (-q**3/(q**4 - 2*q**2 + 1))*F3*F2*F4 + (q**4/(q**4 - 2*q**2 + 1))*F2*F3*F4)*K4*KNeg5*KNeg2**2*KNeg3**2*KNeg4**2*K2*K3*K4*((q**2/(q**4 - 2*q**2 + 1))*E2*E3*E4 + (-q**3/(q**4 - 2*q**2 + 1))*E3*E4*E2 + (-q**3/(q**4 - 2*q**2 + 1))*E4*E2*E3 + (q**4/(q**4 - 2*q**2 + 1))*E4*E3*E2)
right5341 = ((q - 1/q)**2/q**3)*F3*K4*KNeg5*KNeg3**2*KNeg4**2*K3*E3
right5351 = ((q - 1/q)**4/q**3)*((-q/(q**2 - 1))*F4*F3 + (q**2/(q**2 - 1))*F3*F4)*K4*KNeg5*KNeg3**2*KNeg4**2*K3*K4*((-q/(q**2 - 1))*E3*E4 + (q**2/(q**2 - 1))*E4*E3)
right5451 = ((q - 1/q)**2/q)*F4*K4*KNeg5*KNeg4**2*K4*E4
right5142 = (-(q - 1/q)**10/q**7)*((q**4/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F4*F3*F2*F1 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F1*F5*F4*F3*F2 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F1*F5*F4*F3 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F3*F2*F1*F5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F3*F2*F1*F4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F1*F2*F5*F4*F3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F1*F4*F3*F2*F5 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F1*F5*F3*F2*F4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F1*F4*F3*F5 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F1*F5*F3*F4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F2*F1*F5*F4 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F1*F2*F4*F3*F5 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F1*F2*F5*F3*F4 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F1*F3*F2*F5*F4 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F1*F3*F5*F4 + (q**8/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F1*F2*F3*F5*F4)*KNeg1*KNeg2*KNeg3*((q**4/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E1*E2*E3*E4*E5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E3*E4*E5*E1 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E4*E5*E1*E2 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E1*E2*E3*E5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E1*E2*E3*E4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E4*E5*E2*E1 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E2*E3*E5*E1 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E3*E5*E1*E2 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E5*E1*E2*E3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E2*E3*E4*E1 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E3*E4*E1*E2 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E3*E5*E2*E1 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E5*E2*E3*E1 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E5*E3*E1*E2 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E3*E4*E2*E1 + (q**8/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E5*E3*E2*E1)
right5152 = (-(q - 1/q)**8/q**7)*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*F5*F3*F2*F1 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F5*F3*F2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F1*F5*F3 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F3*F2*F1*F5 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F2*F5*F3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F3*F2*F5 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F1*F3*F5 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F2*F3*F5)*KNeg1*KNeg2*KNeg3*KNeg4*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E2*E3*E5 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E3*E5*E1 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E3*E5*E1*E2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E5*E1*E2*E3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E3*E5*E2*E1 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E5*E2*E3*E1 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E5*E3*E1*E2 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*E5*E3*E2*E1)
right5222 = (-(q - 1/q)**12/q**4)*((-q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2**2*F3*F5*F4*F3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F3*F5*F2*F3*F4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F4*F3*F5*F2*F3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F2*F4*F3*F5*F2 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F3*F2*F4*F3*F2 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F3*F4*F3*F5*F2 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F5*F3*F4*F3*F2 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F2*F5*F4*F3*F2 + ((q**8 + q**6 + q**4)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F3*F5*F4*F3*F2)*((-q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2**2*E3*E5*E4*E3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E3*E5*E2*E3*E4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E4*E3*E5*E2*E3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E2*E4*E3*E5*E2 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E3*E2*E4*E3*E2 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E3*E4*E3*E5*E2 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E5*E3*E4*E3*E2 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E2*E5*E4*E3*E2 + ((q**8 + q**6 + q**4)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E3*E5*E4*E3*E2)
right5232 = (-(q - 1/q)**10/q**5)*((q**4/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F5*F4*F3*F2 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F4*F3*F2*F5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F3*F4*F3*F2 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F2*F4*F3*F5 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F2*F5*F3*F4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F3*F2*F5*F3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F3*F2*F4*F3 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F3*F4*F3*F5 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F5*F3*F4*F3 + (q**8/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F3*F5*F4*F3 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F2*F5*F4*F3)*KNeg2*((q**4/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E3*E4*E5*E3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E3*E5*E3*E4*E2 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E3*E5*E3*E2 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E2*E3*E4*E5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E3*E2*E3*E5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E5*E3*E2*E3 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E3*E2*E3*E4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E4*E2*E3*E5 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E5*E2*E3*E4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E3*E5*E2*E3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E3*E4*E2*E3 + (q**8/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E4*E5*E3*E2 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E4*E5*E2*E3)
right5242 = (-(q - 1/q)**8/q**5)*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*F5*F4*F3*F2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F5*F4*F3 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F3*F2*F5 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F5*F3*F2*F4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F4*F3*F5 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F5*F3*F4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F3*F2*F5*F4 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F3*F5*F4)*KNeg2*KNeg3*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E3*E4*E5 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E3*E4*E5*E2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E2*E3*E5 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E5*E2*E3*E4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E3*E5*E2 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E5*E2*E3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E5*E3*E4*E2 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E5*E3*E2)
right5252 = (-(q - 1/q)**6/q**5)*((q**2/(q**4 - 2*q**2 + 1))*F5*F3*F2 + (-q**3/(q**4 - 2*q**2 + 1))*F2*F5*F3 + (-q**3/(q**4 - 2*q**2 + 1))*F3*F2*F5 + (q**4/(q**4 - 2*q**2 + 1))*F2*F3*F5)*KNeg2*KNeg3*KNeg4*((q**2/(q**4 - 2*q**2 + 1))*E2*E3*E5 + (-q**3/(q**4 - 2*q**2 + 1))*E3*E5*E2 + (-q**3/(q**4 - 2*q**2 + 1))*E5*E2*E3 + (q**4/(q**4 - 2*q**2 + 1))*E5*E3*E2)
right5322 = (-(q - 1/q)**10/q**3)*((q**4/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F3*F4*F5*F3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F3*F5*F3*F4*F2 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F3*F5*F3*F2 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F2*F3*F4*F5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F3*F2*F3*F5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F5*F3*F2*F3 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F3*F2*F3*F4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F4*F2*F3*F5 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F5*F2*F3*F4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F3*F5*F2*F3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F3*F4*F2*F3 + (q**8/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F4*F5*F3*F2 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F4*F5*F2*F3)*K2*((q**4/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E5*E4*E3*E2 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E4*E3*E2*E5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E3*E4*E3*E2 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E2*E4*E3*E5 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E2*E5*E3*E4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E3*E2*E5*E3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E3*E2*E4*E3 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E3*E4*E3*E5 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E5*E3*E4*E3 + (q**8/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E3*E5*E4*E3 + ((-q**7 - q**5)/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E2*E5*E4*E3)
right5332 = (-(q - 1/q)**8/q**2)*((-q**3/(q**4 - 2*q**2 + 1))*F3*F4*F3*F5 + (-q**3/(q**4 - 2*q**2 + 1))*F5*F3*F4*F3 + ((q**4 + q**2)/(q**4 - 2*q**2 + 1))*F3*F5*F4*F3)*((-q**3/(q**4 - 2*q**2 + 1))*E3*E4*E3*E5 + (-q**3/(q**4 - 2*q**2 + 1))*E5*E3*E4*E3 + ((q**4 + q**2)/(q**4 - 2*q**2 + 1))*E3*E5*E4*E3)
right5342 = (-(q - 1/q)**6/q**3)*((q**2/(q**4 - 2*q**2 + 1))*F5*F4*F3 + (-q**3/(q**4 - 2*q**2 + 1))*F4*F3*F5 + (-q**3/(q**4 - 2*q**2 + 1))*F5*F3*F4 + (q**4/(q**4 - 2*q**2 + 1))*F3*F5*F4)*KNeg3*((q**2/(q**4 - 2*q**2 + 1))*E3*E4*E5 + (-q**3/(q**4 - 2*q**2 + 1))*E4*E3*E5 + (-q**3/(q**4 - 2*q**2 + 1))*E5*E3*E4 + (q**4/(q**4 - 2*q**2 + 1))*E4*E5*E3)
right5352 = (-(q - 1/q)**4/q**3)*((-q/(q**2 - 1))*F5*F3 + (q**2/(q**2 - 1))*F3*F5)*KNeg3*KNeg4*((-q/(q**2 - 1))*E3*E5 + (q**2/(q**2 - 1))*E5*E3)
right5412 = (-(q - 1/q)**10/q)*((q**4/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F1*F2*F3*F4*F5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F2*F3*F4*F5*F1 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F4*F5*F1*F2 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F1*F2*F3*F5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F1*F2*F3*F4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F3*F4*F5*F2*F1 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F2*F3*F5*F1 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F3*F5*F1*F2 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F5*F1*F2*F3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F2*F3*F4*F1 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F3*F4*F1*F2 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F3*F5*F2*F1 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F5*F2*F3*F1 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F5*F3*F1*F2 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F5*F3*F4*F2*F1 + (q**8/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*F4*F5*F3*F2*F1)*K1*K2*K3*((q**4/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E4*E3*E2*E1 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E1*E5*E4*E3*E2 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E1*E5*E4*E3 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E4*E3*E2*E1*E5 + (-q**5/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E5*E3*E2*E1*E4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E1*E2*E5*E4*E3 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E1*E4*E3*E2*E5 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E1*E5*E3*E2*E4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E1*E4*E3*E5 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E1*E5*E3*E4 + (q**6/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E3*E2*E1*E5*E4 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E1*E2*E4*E3*E5 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E1*E2*E5*E3*E4 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E1*E3*E2*E5*E4 + (-q**7/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E2*E1*E3*E5*E4 + (q**8/(q**8 - 4*q**6 + 6*q**4 - 4*q**2 + 1))*E1*E2*E3*E5*E4)
right5422 = (-(q - 1/q)**8/q)*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F3*F4*F5 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F3*F4*F5*F2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F2*F3*F5 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F5*F2*F3*F4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F3*F5*F2 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F5*F2*F3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F5*F3*F4*F2 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F5*F3*F2)*K2*K3*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*E5*E4*E3*E2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E5*E4*E3 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E3*E2*E5 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E5*E3*E2*E4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E4*E3*E5 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E5*E3*E4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E3*E2*E5*E4 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E3*E5*E4)
right5432 = (-(q - 1/q)**6/q)*((q**2/(q**4 - 2*q**2 + 1))*F3*F4*F5 + (-q**3/(q**4 - 2*q**2 + 1))*F4*F3*F5 + (-q**3/(q**4 - 2*q**2 + 1))*F5*F3*F4 + (q**4/(q**4 - 2*q**2 + 1))*F4*F5*F3)*K3*((q**2/(q**4 - 2*q**2 + 1))*E5*E4*E3 + (-q**3/(q**4 - 2*q**2 + 1))*E4*E3*E5 + (-q**3/(q**4 - 2*q**2 + 1))*E5*E3*E4 + (q**4/(q**4 - 2*q**2 + 1))*E3*E5*E4)
right5442 = (-(q - 1/q)**4)*F5*F4*E5*E4
right5452 = (-(q - 1/q)**2/q)*F5*KNeg4*E5
right5512 = (-q*(q - 1/q)**8)*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F2*F3*F5 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F3*F5*F1 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F3*F5*F1*F2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F5*F1*F2*F3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F3*F5*F2*F1 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F5*F2*F3*F1 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F5*F3*F1*F2 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*F5*F3*F2*F1)*K1*K2*K3*K4*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*E5*E3*E2*E1 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E5*E3*E2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E1*E5*E3 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E3*E2*E1*E5 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E2*E5*E3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E3*E2*E5 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E1*E3*E5 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E2*E3*E5)
right5522 = (-q*(q - 1/q)**6)*((q**2/(q**4 - 2*q**2 + 1))*F2*F3*F5 + (-q**3/(q**4 - 2*q**2 + 1))*F3*F5*F2 + (-q**3/(q**4 - 2*q**2 + 1))*F5*F2*F3 + (q**4/(q**4 - 2*q**2 + 1))*F5*F3*F2)*K2*K3*K4*((q**2/(q**4 - 2*q**2 + 1))*E5*E3*E2 + (-q**3/(q**4 - 2*q**2 + 1))*E2*E5*E3 + (-q**3/(q**4 - 2*q**2 + 1))*E3*E2*E5 + (q**4/(q**4 - 2*q**2 + 1))*E2*E3*E5)
right5532 = (-q*(q - 1/q)**4)*((-q/(q**2 - 1))*F3*F5 + (q**2/(q**2 - 1))*F5*F3)*K3*K4*((-q/(q**2 - 1))*E5*E3 + (q**2/(q**2 - 1))*E3*E5)
right5542 = (-q*(q - 1/q)**2)*F5*K4*E5
right5213 = (q**7*(q - 1/q)**2)*F1*KNeg4*K5*K2**2*K3**2*K4**2*K1*E1
right5313 = (q**5*(q - 1/q)**4)*((-q/(q**2 - 1))*F1*F2 + (q**2/(q**2 - 1))*F2*F1)*KNeg4*K5*K3**2*K4**2*K1*K2*((-q/(q**2 - 1))*E2*E1 + (q**2/(q**2 - 1))*E1*E2)
right5413 = (q**3*(q - 1/q)**6)*((q**2/(q**4 - 2*q**2 + 1))*F1*F2*F3 + (-q**3/(q**4 - 2*q**2 + 1))*F2*F3*F1 + (-q**3/(q**4 - 2*q**2 + 1))*F3*F1*F2 + (q**4/(q**4 - 2*q**2 + 1))*F3*F2*F1)*KNeg4*K5*K4**2*K1*K2*K3*((q**2/(q**4 - 2*q**2 + 1))*E3*E2*E1 + (-q**3/(q**4 - 2*q**2 + 1))*E1*E3*E2 + (-q**3/(q**4 - 2*q**2 + 1))*E2*E1*E3 + (q**4/(q**4 - 2*q**2 + 1))*E1*E2*E3)
right5513 = (q*(q - 1/q)**8)*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*F1*F2*F3*F4 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F2*F3*F4*F1 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F3*F4*F1*F2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F1*F2*F3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F3*F4*F2*F1 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F2*F3*F1 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F3*F1*F2 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*F4*F3*F2*F1)*KNeg4*K5*K1*K2*K3*K4*((-q**3/(q**6 - 3*q**4 + 3*q**2 - 1))*E4*E3*E2*E1 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E4*E3*E2 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E1*E4*E3 + (q**4/(q**6 - 3*q**4 + 3*q**2 - 1))*E3*E2*E1*E4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E2*E4*E3 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E3*E2*E4 + (-q**5/(q**6 - 3*q**4 + 3*q**2 - 1))*E2*E1*E3*E4 + (q**6/(q**6 - 3*q**4 + 3*q**2 - 1))*E1*E2*E3*E4)
right5323 = (q**5*(q - 1/q)**2)*F2*KNeg4*K5*K3**2*K4**2*K2*E2
right5423 = (q**3*(q - 1/q)**4)*((-q/(q**2 - 1))*F2*F3 + (q**2/(q**2 - 1))*F3*F2)*KNeg4*K5*K4**2*K2*K3*((-q/(q**2 - 1))*E3*E2 + (q**2/(q**2 - 1))*E2*E3)
right5523 = (q*(q - 1/q)**6)*((q**2/(q**4 - 2*q**2 + 1))*F2*F3*F4 + (-q**3/(q**4 - 2*q**2 + 1))*F3*F4*F2 + (-q**3/(q**4 - 2*q**2 + 1))*F4*F2*F3 + (q**4/(q**4 - 2*q**2 + 1))*F4*F3*F2)*KNeg4*K5*K2*K3*K4*((q**2/(q**4 - 2*q**2 + 1))*E4*E3*E2 + (-q**3/(q**4 - 2*q**2 + 1))*E2*E4*E3 + (-q**3/(q**4 - 2*q**2 + 1))*E3*E2*E4 + (q**4/(q**4 - 2*q**2 + 1))*E2*E3*E4)
right5433 = (q**3*(q - 1/q)**2)*F3*KNeg4*K5*K4**2*K3*E3
right5533 = (q*(q - 1/q)**4)*((-q/(q**2 - 1))*F3*F4 + (q**2/(q**2 - 1))*F4*F3)*KNeg4*K5*K3*K4*((-q/(q**2 - 1))*E4*E3 + (q**2/(q**2 - 1))*E3*E4)
right5543 = (q*(q - 1/q)**2)*F4*KNeg4*K5*K4*E4
########## GUESSES ##########
right5112 = - q**(-6) * r**16 * r**(-6) * (-q**3 *F1*F2*F3*F4*F1*F2*F3*F5 - q * (q**2 + 1)**2 *F1*F2*F3*F4*F3*F5*F2*F1 + q**2 * (q**2 + 1) *F1*F2*F3*F5*F2*F3*F4*F1 + q**2 * (q**2 + 1) *F1*F2*F3*F5*F4*F1*F2*F3 + q**3 *F1*F2*F3*F5*F4*F3*F1*F2 + (q**6 + q**4 + q**2 + 1)*F1*F2*F3*F5*F4*F3*F2*F1 + q**2 * (q**2 + 1) *F1*F2*F4*F3*F5*F2*F3*F1 - q**3 *F1*F2*F5*F3*F4*F1*F2*F3 - q * (q**2 + 1)**2 *F1*F2*F5*F3*F4*F3*F2*F1 - q**2 * (q**2 + 1) *F1*F2**2*F3*F5*F4*F3*F1 + q**3 *F1*F3*F2*F1*F2*F3*F5*F4 + q**2 * (q**2 + 1) *F1*F3*F2*F4*F3*F5*F2*F1 - q**3 *F1*F3*F2*F5*F3*F4*F1*F2 - q * (q**2 + 1)**2 *F1*F3*F2*F5*F4*F3*F2*F1 + q**3 *F1*F3*F5*F4*F3*F2*F1*F2 + q**3 *F1*F4*F3*F2*F1*F2*F3*F5 - q**3 *F1*F4*F3*F2*F5*F3*F1*F2 + q**3 *F1*F5*F3*F2*F1*F2*F3*F4 + q**2 * (q**2 + 1) *F1*F5*F3*F2*F4*F3*F2*F1 + q**3 *F1*F5*F4*F3*F2*F1*F2*F3 - q**2 * (q**2 + 1) *F1**2*F2*F3*F5*F4*F3*F2 + q**3 *F2*F1*F2*F3*F5*F4*F3*F1 + q**2 * (q**2 + 1) *F2*F1*F3*F4*F3*F5*F2*F1 - q**3 *F2*F1*F3*F5*F2*F3*F4*F1 - q*(q**4 + q**2 + 1) *F2*F1*F3*F5*F4*F3*F2*F1 - q**3 *F2*F1*F4*F3*F5*F2*F3*F1 + q**2 * (q**2 + 1) *F2*F1*F5*F3*F4*F3*F2*F1 - q**3 *F3*F2*F1*F4*F3*F5*F2*F1 + q**2 * (q**2 + 1) *F3*F2*F1*F5*F4*F3*F2*F1 - q**3 *F5*F3*F2*F1*F4*F3*F2*F1) * r**(-6) * (-q**3 *E1*E2*E3*E4*E1*E2*E3*E5 - q * (q**2 + 1)**2 *E1*E2*E3*E4*E3*E5*E2*E1 + q**2 * (q**2 + 1) *E1*E2*E3*E5*E2*E3*E4*E1 + q**2 * (q**2 + 1) *E1*E2*E3*E5*E4*E1*E2*E3 + q**3 *E1*E2*E3*E5*E4*E3*E1*E2 + (q**6 + q**4 + q**2 + 1)*E1*E2*E3*E5*E4*E3*E2*E1 + q**2 * (q**2 + 1) *E1*E2*E4*E3*E5*E2*E3*E1 - q**3 *E1*E2*E5*E3*E4*E1*E2*E3 - q * (q**2 + 1)**2 *E1*E2*E5*E3*E4*E3*E2*E1 - q**2 * (q**2 + 1) *E1*E2**2*E3*E5*E4*E3*E1 + q**3 *E1*E3*E2*E1*E2*E3*E5*E4 + q**2 * (q**2 + 1) *E1*E3*E2*E4*E3*E5*E2*E1 - q**3 *E1*E3*E2*E5*E3*E4*E1*E2 - q * (q**2 + 1)**2 *E1*E3*E2*E5*E4*E3*E2*E1 + q**3 *E1*E3*E5*E4*E3*E2*E1*E2 + q**3 *E1*E4*E3*E2*E1*E2*E3*E5 - q**3 *E1*E4*E3*E2*E5*E3*E1*E2 + q**3 *E1*E5*E3*E2*E1*E2*E3*E4 + q**2 * (q**2 + 1) *E1*E5*E3*E2*E4*E3*E2*E1 + q**3 *E1*E5*E4*E3*E2*E1*E2*E3 - q**2 * (q**2 + 1) *E1**2*E2*E3*E5*E4*E3*E2 + q**3 *E2*E1*E2*E3*E5*E4*E3*E1 + q**2 * (q**2 + 1) *E2*E1*E3*E4*E3*E5*E2*E1 - q**3 *E2*E1*E3*E5*E2*E3*E4*E1 - q*(q**4 + q**2 + 1) *E2*E1*E3*E5*E4*E3*E2*E1 - q**3 *E2*E1*E4*E3*E5*E2*E3*E1 + q**2 * (q**2 + 1) *E2*E1*E5*E3*E4*E3*E2*E1 - q**3 *E3*E2*E1*E4*E3*E5*E2*E1 + q**2 * (q**2 + 1) *E3*E2*E1*E5*E4*E3*E2*E1 - q**3 *E5*E3*E2*E1*E4*E3*E2*E1)
right5122 = - q**(-7) * r**(14) * r**(-6) * (-q**5*F1*F2*F3*F4*F3*F5*F2 + q**4*F1*F2*F3*F5*F2*F3*F4 - q**3*F1*F2*F3*F5*F4*F2*F3 + q**6*F1*F2*F3*F5*F4*F3*F2 + q**4*F1*F2*F4*F3*F5*F2*F3 - q**5*F1*F2*F5*F3*F4*F3*F2 - (q**4 - q**2)*F1*F2**2*F3*F5*F4*F3 + q**4*F1*F3*F2*F4*F3*F5*F2 - q**5*F1*F3*F2*F5*F4*F3*F2 + q**4*F1*F5*F3*F2*F4*F3*F2 + (q**3 - q)*F2*F1*F2*F3*F5*F4*F3 - q**3*F2*F1*F3*F4*F2*F3*F5 + (q**4 + q**2)*F2*F1*F3*F4*F3*F5*F2 - q**3*F2*F1*F3*F5*F2*F3*F4 + (q**4 + q**2)*F2*F1*F3*F5*F4*F2*F3 - (q**5 + q)*F2*F1*F3*F5*F4*F3*F2 - q**3*F2*F1*F4*F3*F5*F2*F3 - q**3*F2*F1*F5*F3*F4*F2*F3 + (q**4 + q**2)*F2*F1*F5*F3*F4*F3*F2 - q*F2*F3*F4*F3*F5*F2*F1 + q**2*F2*F3*F5*F2*F1*F3*F4 - q**3*F2*F3*F5*F4*F2*F1*F3 + 1*F2*F3*F5*F4*F3*F2*F1 + q**2*F2*F4*F3*F5*F2*F1*F3 - q*F2*F5*F3*F4*F3*F2*F1 - q**3*F3*F2*F1*F4*F3*F5*F2 - q**3*F3*F2*F1*F5*F3*F4*F2 + (q**4 + q**2)*F3*F2*F1*F5*F4*F3*F2 + q**2*F3*F2*F4*F3*F5*F2*F1 - q*F3*F2*F5*F4*F3*F2*F1 - q**3*F4*F3*F2*F1*F5*F3*F2 - q**3*F5*F3*F2*F1*F4*F3*F2 + q**2*F5*F3*F2*F4*F3*F2*F1) * KNeg1 * r**(-6) * (-q**5*E2*E5*E3*E4*E3*E2*E1 + q**4*E4*E3*E2*E5*E3*E2*E1 - q**3*E3*E2*E4*E5*E3*E2*E1 + q**6*E2*E3*E4*E5*E3*E2*E1 + q**4*E3*E2*E5*E3*E4*E2*E1 - q**5*E2*E3*E4*E3*E5*E2*E1 - (q**4 - q**2)*E1*E2**2*E3*E5*E4*E3 + q**4*E2*E5*E3*E4*E2*E3*E1 - q**5*E2*E3*E4*E5*E2*E3*E1 + q**4*E2*E3*E4*E2*E3*E5*E1 + (q**3 - q)*E3*E4*E5*E3*E2*E1*E2 - q**3*E5*E3*E2*E4*E3*E1*E2 + (q**4 + q**2)*E2*E5*E3*E4*E3*E1*E2 - q**3*E4*E3*E2*E5*E3*E1*E2 + (q**4 + q**2)*E3*E2*E4*E5*E3*E1*E2 - (q**5 + q)*E2*E3*E4*E5*E3*E1*E2 - q**3*E3*E2*E5*E3*E4*E1*E2 - q**3*E3*E2*E4*E3*E5*E1*E2 + (q**4 + q**2)*E2*E3*E4*E3*E5*E1*E2 - q*E1*E2*E5*E3*E4*E3*E2 + q**2*E4*E3*E1*E2*E5*E3*E2 - q**3*E3*E1*E2*E4*E5*E3*E2 + 1*E1*E2*E3*E4*E5*E3*E2 + q**2*E3*E1*E2*E5*E3*E4*E2 - q*E1*E2*E3*E4*E3*E5*E2 - q**3*E2*E5*E3*E4*E1*E2*E3 - q**3*E2*E4*E3*E5*E1*E2*E3 + (q**4 + q**2)*E2*E3*E4*E5*E1*E2*E3 + q**2*E1*E2*E5*E3*E4*E2*E3 - q*E1*E2*E3*E4*E5*E2*E3 - q**3*E2*E3*E5*E1*E2*E3*E4 - q**3*E2*E3*E4*E1*E2*E3*E5 + q**2*E1*E2*E3*E4*E2*E3*E5)
right5212 = - q**(-5) * r**(14) * r**(-6) * (-q**5*F2*F5*F3*F4*F3*F2*F1 + q**4*F4*F3*F2*F5*F3*F2*F1 - q**3*F3*F2*F4*F5*F3*F2*F1 + q**6*F2*F3*F4*F5*F3*F2*F1 + q**4*F3*F2*F5*F3*F4*F2*F1 - q**5*F2*F3*F4*F3*F5*F2*F1 - (q**4 - q**2)*F1*F2**2*F3*F5*F4*F3 + q**4*F2*F5*F3*F4*F2*F3*F1 - q**5*F2*F3*F4*F5*F2*F3*F1 + q**4*F2*F3*F4*F2*F3*F5*F1 + (q**3 - q)*F3*F4*F5*F3*F2*F1*F2 - q**3*F5*F3*F2*F4*F3*F1*F2 + (q**4 + q**2)*F2*F5*F3*F4*F3*F1*F2 - q**3*F4*F3*F2*F5*F3*F1*F2 + (q**4 + q**2)*F3*F2*F4*F5*F3*F1*F2 - (q**5 + q)*F2*F3*F4*F5*F3*F1*F2 - q**3*F3*F2*F5*F3*F4*F1*F2 - q**3*F3*F2*F4*F3*F5*F1*F2 + (q**4 + q**2)*F2*F3*F4*F3*F5*F1*F2 - q*F1*F2*F5*F3*F4*F3*F2 + q**2*F4*F3*F1*F2*F5*F3*F2 - q**3*F3*F1*F2*F4*F5*F3*F2 + 1*F1*F2*F3*F4*F5*F3*F2 + q**2*F3*F1*F2*F5*F3*F4*F2 - q*F1*F2*F3*F4*F3*F5*F2 - q**3*F2*F5*F3*F4*F1*F2*F3 - q**3*F2*F4*F3*F5*F1*F2*F3 + (q**4 + q**2)*F2*F3*F4*F5*F1*F2*F3 + q**2*F1*F2*F5*F3*F4*F2*F3 - q*F1*F2*F3*F4*F5*F2*F3 - q**3*F2*F3*F5*F1*F2*F3*F4 - q**3*F2*F3*F4*F1*F2*F3*F5 + q**2*F1*F2*F3*F4*F2*F3*F5) * K1 * r**(-6) * (-q**5*E1*E2*E3*E4*E3*E5*E2 + q**4*E1*E2*E3*E5*E2*E3*E4 - q**3*E1*E2*E3*E5*E4*E2*E3 + q**6*E1*E2*E3*E5*E4*E3*E2 + q**4*E1*E2*E4*E3*E5*E2*E3 - q**5*E1*E2*E5*E3*E4*E3*E2 - (q**4 - q**2)*E1*E2**2*E3*E5*E4*E3 + q**4*E1*E3*E2*E4*E3*E5*E2 - q**5*E1*E3*E2*E5*E4*E3*E2 + q**4*E1*E5*E3*E2*E4*E3*E2 + (q**3 - q)*E2*E1*E2*E3*E5*E4*E3 - q**3*E2*E1*E3*E4*E2*E3*E5 + (q**4 + q**2)*E2*E1*E3*E4*E3*E5*E2 - q**3*E2*E1*E3*E5*E2*E3*E4 + (q**4 + q**2)*E2*E1*E3*E5*E4*E2*E3 - (q**5 + q)*E2*E1*E3*E5*E4*E3*E2 - q**3*E2*E1*E4*E3*E5*E2*E3 - q**3*E2*E1*E5*E3*E4*E2*E3 + (q**4 + q**2)*E2*E1*E5*E3*E4*E3*E2 - q*E2*E3*E4*E3*E5*E2*E1 + q**2*E2*E3*E5*E2*E1*E3*E4 - q**3*E2*E3*E5*E4*E2*E1*E3 + 1*E2*E3*E5*E4*E3*E2*E1 + q**2*E2*E4*E3*E5*E2*E1*E3 - q*E2*E5*E3*E4*E3*E2*E1 - q**3*E3*E2*E1*E4*E3*E5*E2 - q**3*E3*E2*E1*E5*E3*E4*E2 + (q**4 + q**2)*E3*E2*E1*E5*E4*E3*E2 + q**2*E3*E2*E4*E3*E5*E2*E1 - q*E3*E2*E5*E4*E3*E2*E1 - q**3*E4*E3*E2*E1*E5*E3*E2 - q**3*E5*E3*E2*E1*E4*E3*E2 + q**2*E5*E3*E2*E4*E3*E2*E1)
right5132 = q**(-7) * r**(12) * r**(-5) * (-q**4*F1*F2*F3*F4*F3*F5 + q**5*F1*F2*F3*F5*F4*F3 - q**4*F1*F2*F5*F3*F4*F3 + q**3*F1*F3*F2*F4*F3*F5 + q**3*F1*F3*F2*F5*F3*F4 - (q**4 + q**2)*F1*F3*F2*F5*F4*F3 - q**2*F1*F3*F4*F3*F2*F5 + q*F1*F3*F5*F4*F3*F2 + q**3*F1*F4*F3*F2*F5*F3 + q**3*F1*F5*F3*F2*F4*F3 - q**2*F1*F5*F3*F4*F3*F2 + q**3*F2*F1*F3*F4*F3*F5 - q**4*F2*F1*F3*F5*F4*F3 + q**3*F2*F1*F5*F3*F4*F3 - q**2*F3*F2*F1*F4*F3*F5 - q**2*F3*F2*F1*F5*F3*F4 + (q**3 + q)*F3*F2*F1*F5*F4*F3 + q*F3*F4*F3*F2*F1*F5 - 1*F3*F5*F4*F3*F2*F1 - q**2*F4*F3*F2*F1*F5*F3 - q**2*F5*F3*F2*F1*F4*F3 + q*F5*F3*F4*F3*F2*F1) * KNeg1 * KNeg2 * r**(-5) * (-q**4*E5*E3*E4*E3*E2*E1 + q**5*E3*E4*E5*E3*E2*E1 - q**4*E3*E4*E3*E5*E2*E1 + q**3*E5*E3*E4*E2*E3*E1 + q**3*E4*E3*E5*E2*E3*E1 - (q**4 + q**2)*E3*E4*E5*E2*E3*E1 - q**2*E5*E2*E3*E4*E3*E1 + q*E2*E3*E4*E5*E3*E1 + q**3*E3*E5*E2*E3*E4*E1 + q**3*E3*E4*E2*E3*E5*E1 - q**2*E2*E3*E4*E3*E5*E1 + q**3*E5*E3*E4*E3*E1*E2 - q**4*E3*E4*E5*E3*E1*E2 + q**3*E3*E4*E3*E5*E1*E2 - q**2*E5*E3*E4*E1*E2*E3 - q**2*E4*E3*E5*E1*E2*E3 + (q**3 + q)*E3*E4*E5*E1*E2*E3 + q*E5*E1*E2*E3*E4*E3 - 1*E1*E2*E3*E4*E5*E3 - q**2*E3*E5*E1*E2*E3*E4 - q**2*E3*E4*E1*E2*E3*E5 + q*E1*E2*E3*E4*E3*E5)
right5312 = q**(-3) * r**(12) * r**(-5) * (-q**4*F5*F3*F4*F3*F2*F1 + q**5*F3*F4*F5*F3*F2*F1 - q**4*F3*F4*F3*F5*F2*F1 + q**3*F5*F3*F4*F2*F3*F1 + q**3*F4*F3*F5*F2*F3*F1 - (q**4 + q**2)*F3*F4*F5*F2*F3*F1 - q**2*F5*F2*F3*F4*F3*F1 + q*F2*F3*F4*F5*F3*F1 + q**3*F3*F5*F2*F3*F4*F1 + q**3*F3*F4*F2*F3*F5*F1 - q**2*F2*F3*F4*F3*F5*F1 + q**3*F5*F3*F4*F3*F1*F2 - q**4*F3*F4*F5*F3*F1*F2 + q**3*F3*F4*F3*F5*F1*F2 - q**2*F5*F3*F4*F1*F2*F3 - q**2*F4*F3*F5*F1*F2*F3 + (q**3 + q)*F3*F4*F5*F1*F2*F3 + q*F5*F1*F2*F3*F4*F3 - 1*F1*F2*F3*F4*F5*F3 - q**2*F3*F5*F1*F2*F3*F4 - q**2*F3*F4*F1*F2*F3*F5 + q*F1*F2*F3*F4*F3*F5) * K1 * K2 * r**(-5) * (-q**4*E1*E2*E3*E4*E3*E5 + q**5*E1*E2*E3*E5*E4*E3 - q**4*E1*E2*E5*E3*E4*E3 + q**3*E1*E3*E2*E4*E3*E5 + q**3*E1*E3*E2*E5*E3*E4 - (q**4 + q**2)*E1*E3*E2*E5*E4*E3 - q**2*E1*E3*E4*E3*E2*E5 + q*E1*E3*E5*E4*E3*E2 + q**3*E1*E4*E3*E2*E5*E3 + q**3*E1*E5*E3*E2*E4*E3 - q**2*E1*E5*E3*E4*E3*E2 + q**3*E2*E1*E3*E4*E3*E5 - q**4*E2*E1*E3*E5*E4*E3 + q**3*E2*E1*E5*E3*E4*E3 - q**2*E3*E2*E1*E4*E3*E5 - q**2*E3*E2*E1*E5*E3*E4 + (q**3 + q)*E3*E2*E1*E5*E4*E3 + q*E3*E4*E3*E2*E1*E5 - 1*E3*E5*E4*E3*E2*E1 - q**2*E4*E3*E2*E1*E5*E3 - q**2*E5*E3*E2*E1*E4*E3 + q*E5*E3*E4*E3*E2*E1)



########## PRINTING ############
leftSumPos = left1 + left2 + left3 + left4 + left5
leftSumNeg = leftNeg1 + leftNeg2 + leftNeg3 + leftNeg4 + leftNeg5
rightSum1 = right5121 + right5131 + right5141 + right5151 + right5231 + right5241 + right5251 + right5341 + right5351 + right5451
rightSum2 = right5112 + right5122 + right5132 + right5142 + right5152 + right5212 + right5222 + right5232 + right5242 + right5252 + right5312 + right5322 + right5332 + right5342 + right5352 + right5412 + right5422 + right5432 + right5442 + right5452 + right5512 + right5522 + right5532 + right5542
rightSum3 = right5213 + right5313 + right5413 + right5513 + right5323 + right5423 + right5523 + right5433 + right5533 + right5543

representation = leftSumPos + leftSumNeg + rightSum1 + rightSum2 + rightSum3

final = zeros(2*n)
for i in range(2*n):
    for j in range(2*n):
         final[i,j] = collect(powsimp(powdenest(expand(representation[i,j].subs(r, q - 1/q)))), q)
print(final)
for i in range(2*n):
    print(simplify(final[i,i]), file = fout)





